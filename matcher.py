import os
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    MessageHandler,
    CommandHandler,
    filters
)
from openai import OpenAI
from matcher import get_services_for_product

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å
def support_response(product_name):
    category, services = get_services_for_product(product_name)
    if not category:
        return "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–∑–≤—É –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ SUPPORT.UA."

    response = f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: *{category}*\nüì¶ –î–æ—Å—Ç—É–ø–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏:\n"
    for service in services:
        response += f"‚Ä¢ {service}\n"
    return response

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    try:
        reply = support_response(user_message)
    except Exception as e:
        reply = f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}"

    await update.message.reply_text(reply, parse_mode="Markdown")

# –ó–∞–ø—É—Å–∫
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", handle_message))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 10000)),
        webhook_url=f"https://{os.environ['RENDER_EXTERNAL_HOSTNAME']}/"
    )

if __name__ == '__main__':
    main()

