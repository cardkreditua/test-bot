import os
import logging
import openai
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters
)

# üîß –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not BOT_TOKEN or not OPENAI_API_KEY:
    raise ValueError("‚ùå BOT_TOKEN –∞–±–æ OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω—ñ –≤ —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ (Render > Environment).")

openai.api_key = OPENAI_API_KEY

SYSTEM_PROMPT = (
    "–¢–∏ –∞—Å–∏—Å—Ç–µ–Ω—Ç-–ø—Ä–æ–¥–∞–≤–µ—Ü—å ROZETKA. –ö–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É, "
    "—Ç–∏ —á—ñ—Ç–∫–æ —ñ —Å—Ç–∏—Å–ª–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î—à, —è–∫—ñ —Å–µ—Ä–≤—ñ—Å–∏ SUPPORT.UA –º–æ–∂–Ω–∞ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –¥–æ –Ω—å–æ–≥–æ. "
    "–ù–µ –¥–æ–¥–∞–≤–∞–π –∑–∞–π–≤–æ–≥–æ —Ç–µ–∫—Å—Ç—É. –Ø–∫—â–æ —Å–µ—Ä–≤—ñ—Å—ñ–≤ –Ω–µ–º–∞—î ‚Äî —Ç–∞–∫ —ñ —Å–∫–∞–∂–∏. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é."
)

# üëâ –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –ù–∞–ø–∏—à–∏ –º–µ–Ω—ñ –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É, —ñ —è –ø—ñ–¥–∫–∞–∂—É, —è–∫—ñ —Å–µ—Ä–≤—ñ—Å–∏ SUPPORT.UA –º–æ–∂–Ω–∞ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏."
    )

# üëâ –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text.strip()
    logging.info(f"üîπ –û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç: {user_message}")

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": SYSTEM_PROMPT},
                {"role": "user", "content": user_message}
            ],
            temperature=0.2
        )
        reply = response["choices"][0]["message"]["content"]
        await update.message.reply_text(reply)

    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ OpenAI: {e}")
        await update.message.reply_text("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.")

# üëâ –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
    logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ")
    app.run_polling()
